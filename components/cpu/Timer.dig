<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes>
    <entry>
      <string>Description</string>
      <string>The Timer component that contains a FSM which determines the current CPU phase and state. Once the processor starts, it will initialize to the fetch phase.
The state is encoded as a 3-bit value: 0=Fetch, 1=Test, 2=Execute, 3=Pause, 4=Halted, 5+6+7=Unused.</string>
    </entry>
    <entry>
      <string>Width</string>
      <int>12</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock TestSucceeds Halt Fetch Execute Halted

# check if at fetch
0     0            0    1     0       0

# test failed, check if remains at fetch
C     0            0    1     0       0

# test passed, check if at execute
C     1            0    0     1       0

# check if back to fetch
C     1            0    1     0       0

# halt
C     0            1    1     0       0
C     1            1    0     1       0
C     1            1    0     0       1

# check if stays halted
C     0            0    0     0       1
C     1            0    0     0       1
C     0            0    0     0       1</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="460" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BadTS</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock TestSucceeds Halt Fetch Execute Halted

# check if at fetch if an incorrect test succeeds value was provided
0     1            0    1     0       0</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="460" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BadHalt</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock TestSucceeds Halt Fetch Execute Halted

# check if at fetch if an incorrect halt value was provided
0     0            1    1     0       0</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="360" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BadHaltTS</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>Clock TestSucceeds Halt Fetch Execute Halted

# check if at fetch if incorrect halt and test succeeds values were provided
0     1            1    1     0       0</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="360" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>TimerTransitions.dig</elementName>
      <elementAttributes/>
      <pos x="720" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>D_FF</elementName>
      <elementAttributes>
        <entry>
          <string>valueIsProbe</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>PHASE</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="600" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Clock</string>
        </entry>
      </elementAttributes>
      <pos x="380" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Test succeeded input pin that determines if the fetched instruction should be executed. If high during the test phase, the CPU will move to the execute phase, otherwise it returns to the fetch phase.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>TestSucceeds</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>If this input pin is high -and the CPU enters the execute phase- the CPU will enter the halted state.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Halt</string>
        </entry>
      </elementAttributes>
      <pos x="660" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>mapToKey</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>F</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes/>
      <pos x="600" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>XOr</elementName>
      <elementAttributes/>
      <pos x="500" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Delay</elementName>
      <elementAttributes/>
      <pos x="440" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Decoder</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Determines if the CPU is currently in the halted state.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Halted</string>
        </entry>
      </elementAttributes>
      <pos x="720" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Determines if the CPU is currently in the fetch phase.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Fetch</string>
        </entry>
      </elementAttributes>
      <pos x="720" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Determines if the CPU is currently in the execute phase.</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Execute</string>
        </entry>
      </elementAttributes>
      <pos x="720" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Rectangle</elementName>
      <elementAttributes>
        <entry>
          <string>RectHeight</string>
          <int>4</int>
        </entry>
        <entry>
          <string>Label</string>
          <string>DetectEdge</string>
        </entry>
        <entry>
          <string>RectWidth</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="480"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="580" y="640"/>
      <p2 x="600" y="640"/>
    </wire>
    <wire>
      <p1 x="420" y="500"/>
      <p2 x="500" y="500"/>
    </wire>
    <wire>
      <p1 x="580" y="500"/>
      <p2 x="600" y="500"/>
    </wire>
    <wire>
      <p1 x="660" y="500"/>
      <p2 x="680" y="500"/>
    </wire>
    <wire>
      <p1 x="680" y="500"/>
      <p2 x="720" y="500"/>
    </wire>
    <wire>
      <p1 x="700" y="340"/>
      <p2 x="720" y="340"/>
    </wire>
    <wire>
      <p1 x="700" y="260"/>
      <p2 x="720" y="260"/>
    </wire>
    <wire>
      <p1 x="900" y="520"/>
      <p2 x="920" y="520"/>
    </wire>
    <wire>
      <p1 x="560" y="520"/>
      <p2 x="600" y="520"/>
    </wire>
    <wire>
      <p1 x="680" y="520"/>
      <p2 x="720" y="520"/>
    </wire>
    <wire>
      <p1 x="580" y="600"/>
      <p2 x="600" y="600"/>
    </wire>
    <wire>
      <p1 x="580" y="440"/>
      <p2 x="920" y="440"/>
    </wire>
    <wire>
      <p1 x="660" y="680"/>
      <p2 x="700" y="680"/>
    </wire>
    <wire>
      <p1 x="700" y="300"/>
      <p2 x="720" y="300"/>
    </wire>
    <wire>
      <p1 x="660" y="620"/>
      <p2 x="680" y="620"/>
    </wire>
    <wire>
      <p1 x="480" y="540"/>
      <p2 x="500" y="540"/>
    </wire>
    <wire>
      <p1 x="380" y="540"/>
      <p2 x="420" y="540"/>
    </wire>
    <wire>
      <p1 x="700" y="540"/>
      <p2 x="720" y="540"/>
    </wire>
    <wire>
      <p1 x="420" y="540"/>
      <p2 x="440" y="540"/>
    </wire>
    <wire>
      <p1 x="580" y="440"/>
      <p2 x="580" y="500"/>
    </wire>
    <wire>
      <p1 x="420" y="500"/>
      <p2 x="420" y="540"/>
    </wire>
    <wire>
      <p1 x="920" y="440"/>
      <p2 x="920" y="520"/>
    </wire>
    <wire>
      <p1 x="680" y="400"/>
      <p2 x="680" y="500"/>
    </wire>
    <wire>
      <p1 x="680" y="520"/>
      <p2 x="680" y="620"/>
    </wire>
    <wire>
      <p1 x="700" y="540"/>
      <p2 x="700" y="680"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>