<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>shapeType</string>
      <shapeType>SIMPLE</shapeType>
    </entry>
    <entry>
      <string>Description</string>
      <string>Performs a logical shift left of B by A places, i.e. B &lt;&lt; A</string>
    </entry>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The A operand</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>A</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="540" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The B operand</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>B</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="540" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The output value</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>Out</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="980" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>The carry value</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>C</string>
        </entry>
      </elementAttributes>
      <pos x="980" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>BarrelShifter</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-5</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Sub</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="640" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>32</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="640" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>BitSelector</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="820" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-4</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Comparator</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Comparator</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="640" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>32</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="640" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="760" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>inverterConfig</string>
          <inverterConfig>
            <string>In_1</string>
          </inverterConfig>
        </entry>
      </elementAttributes>
      <pos x="900" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes/>
      <pos x="800" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>A B Out C

loop(i, 256)
    # determine random values for A and B inputs
    let a = random(1&lt;&lt;32) &amp; 0x1f;
    let b = random(1&lt;&lt;32);

    # compute expected Result
    let r = ite((a &gt;= 0 &amp; a &lt;= 32), ((b &lt;&lt; a) &amp; 0xffffffff), 0);

    # determine expected flag
    let c = ite(a = 0 | a &gt; 32, 0, (b &gt;&gt; (32-a)) &amp; 1);

    # perform logical shift left, and then check Result and carry flag are as expected
    (a) (b) (r) (c)
end loop

loop(i, 128)
    # determine random values for A and B inputs
    let a = 32;
    let b = random(1&lt;&lt;32);

    # compute expected Result
    let r = ite((a &gt;= 0 &amp; a &lt;= 32), ((b &lt;&lt; a) &amp; 0xffffffff), 0);

    # determine expected flag
    let c = ite(a = 0 | a &gt; 32, 0, (b &gt;&gt; (32-a)) &amp; 1);

    # perform logical shift left, and then check Result and carry flag are as expected
    (a) (b) (r) (c)
end loop

loop(i, 128)
    # determine random values for A and B inputs
    let a = random(1&lt;&lt;32);
    let b = random(1&lt;&lt;32);

    # compute expected Result
    let r = ite((a &gt;= 0 &amp; a &lt;= 32), ((b &lt;&lt; a) &amp; 0xffffffff), 0);

    # determine expected flag
    let c = ite(a = 0 | a &gt; 32, 0, (b &gt;&gt; (32-a)) &amp; 1);

    # perform logical shift left, and then check Result and carry flag are as expected
    (a) (b) (r) (c)
end loop</dataString>
          </testData>
        </entry>
      </elementAttributes>
      <pos x="920" y="360"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="720" y="480"/>
      <p2 x="760" y="480"/>
    </wire>
    <wire>
      <p1 x="860" y="260"/>
      <p2 x="880" y="260"/>
    </wire>
    <wire>
      <p1 x="740" y="520"/>
      <p2 x="760" y="520"/>
    </wire>
    <wire>
      <p1 x="580" y="200"/>
      <p2 x="660" y="200"/>
    </wire>
    <wire>
      <p1 x="640" y="360"/>
      <p2 x="660" y="360"/>
    </wire>
    <wire>
      <p1 x="720" y="360"/>
      <p2 x="740" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="360"/>
      <p2 x="840" y="360"/>
    </wire>
    <wire>
      <p1 x="540" y="460"/>
      <p2 x="640" y="460"/>
    </wire>
    <wire>
      <p1 x="640" y="460"/>
      <p2 x="660" y="460"/>
    </wire>
    <wire>
      <p1 x="880" y="300"/>
      <p2 x="900" y="300"/>
    </wire>
    <wire>
      <p1 x="640" y="300"/>
      <p2 x="660" y="300"/>
    </wire>
    <wire>
      <p1 x="780" y="240"/>
      <p2 x="800" y="240"/>
    </wire>
    <wire>
      <p1 x="640" y="400"/>
      <p2 x="660" y="400"/>
    </wire>
    <wire>
      <p1 x="620" y="500"/>
      <p2 x="660" y="500"/>
    </wire>
    <wire>
      <p1 x="540" y="500"/>
      <p2 x="580" y="500"/>
    </wire>
    <wire>
      <p1 x="800" y="500"/>
      <p2 x="980" y="500"/>
    </wire>
    <wire>
      <p1 x="580" y="500"/>
      <p2 x="600" y="500"/>
    </wire>
    <wire>
      <p1 x="960" y="280"/>
      <p2 x="980" y="280"/>
    </wire>
    <wire>
      <p1 x="720" y="280"/>
      <p2 x="780" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="660" y="280"/>
    </wire>
    <wire>
      <p1 x="780" y="280"/>
      <p2 x="800" y="280"/>
    </wire>
    <wire>
      <p1 x="640" y="440"/>
      <p2 x="820" y="440"/>
    </wire>
    <wire>
      <p1 x="860" y="440"/>
      <p2 x="880" y="440"/>
    </wire>
    <wire>
      <p1 x="640" y="220"/>
      <p2 x="660" y="220"/>
    </wire>
    <wire>
      <p1 x="720" y="220"/>
      <p2 x="780" y="220"/>
    </wire>
    <wire>
      <p1 x="580" y="380"/>
      <p2 x="660" y="380"/>
    </wire>
    <wire>
      <p1 x="880" y="300"/>
      <p2 x="880" y="440"/>
    </wire>
    <wire>
      <p1 x="640" y="440"/>
      <p2 x="640" y="460"/>
    </wire>
    <wire>
      <p1 x="580" y="200"/>
      <p2 x="580" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="380"/>
      <p2 x="580" y="500"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="580" y="380"/>
    </wire>
    <wire>
      <p1 x="840" y="360"/>
      <p2 x="840" y="420"/>
    </wire>
    <wire>
      <p1 x="780" y="220"/>
      <p2 x="780" y="240"/>
    </wire>
    <wire>
      <p1 x="780" y="280"/>
      <p2 x="780" y="480"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>